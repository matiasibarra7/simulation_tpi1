{"version":3,"sources":["App.js","index.js"],"names":["App","useState","m","setM","n","setN","replicas","setReplicas","arrayReplicas","setArrayReplicas","intervaloDeConfianza","setIntervaloDeConfianza","getTTR","t","tpsa","control","tcb","tsc","tsd","tcp","time_at_a","time_at_b","time_at_c","time_at_d","time_at_e","time_at_f","time_at_g","t_ab","t_bc","t_bd","t_df","t_ce","t_ec","t_eg","t_fg","t_gh","ttr","nc","generateIS","generateDistNorm","balsa_time","puente_time","media","deviac","coseno","Math","cos","PI","random","sqrt","log10","className","htmlFor","type","name","id","value","onChange","e","Number","target","onClick","amount","arrayTTRs","i","push","console","log","getVariosTTR","length","avg","r","aux","pow","s","intervalo","interInf","interSup","getIntervaloConfianza","map","el","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d06d03cb.chunk.js","sourcesContent":["import './App.css';\nimport  { useState } from 'react';\n\nfunction App() {\n\n  // variables rancias\n  const [m, setM] = useState(0);\n  const [n, setN] = useState(0);\n  const [replicas, setReplicas] = useState(0);\n  const [arrayReplicas, setArrayReplicas] = useState([])\n  const [intervaloDeConfianza, setIntervaloDeConfianza] = useState([])\n\n\n  function getTTR() {\n    // console.log(\"n vale: \", n,\"m vale: \", m)\n\n\n    //  <<< Inicialización de las variables >>>>\n\n    let t = 0; \n    let tpsa = 0; // proxima llegada de auto\n    let control = 0 // controlador del distribucion ciclica\n\n    let tcb = 0 // Tiempo comprometido de la balsa\n    let tsc = 0 // Tiempo de liberación de la balsa\n\n    let tsd = 0 // Tiempo de liberación del puente\n    let tcp = 0 // Tiempo comprometido del puente\n\n\n    // tiempos en cada punto\n    let time_at_a = 0\n    let time_at_b = 0\n    let time_at_c = 0\n    let time_at_d = 0\n    let time_at_e = 0\n    let time_at_f = 0\n    let time_at_g = 0\n    let time_at_h = 0\n\n    // tramos\n    let t_ab = 0; \n    let t_bc = 0; \n    let t_bd = 0; \n    let t_df = 0; \n    let t_ce = 0; \n    let t_ec = 0; \n    let t_eg = 0; \n    let t_fg = 0; \n    let t_gh = 0; \n\n    // tiempo total\n    let ttr = 0; \n\n    //  <<< Fin de Inicialización de las variables >>>>\n\n\n    // nc representa a los autos\n    for (let nc = 1; nc <= 10; nc++) {\n  \n      // Paso 1\n      t = tpsa\n\n      //Paso 2\n      let is = generateIS()\n\n      //Paso 3\n      tpsa = t + is\n\n      //Paso 4\n      time_at_a = t\n\n      //Paso 5\n      // nc = nc + 1 (Esto lo hace el contador del for)\n\n      //Paso 6 (Tramo AB -- media = 4 y desv = 0.5)\n      t_ab = generateDistNorm(4, 0.5)\n\n      //Paso 7\n      time_at_b = time_at_a + t_ab\n\n      //Paso 8\n      if (control < m) {\n\n        // Va por la balsa\n        balsa_time()\n\n      } else {\n        // Paso 8.2.1 VEMOS SI CONTROL NO PASO DE LARGO\n        if (control >= (m + n)) {\n          // Paso 8.2.1.1\n          // Se paso el control, reset y va por balsa\n          control = 0\n\n          // Paso 8.2.1.2\n          // Va por la balsa\n          balsa_time()\n\n        } else {\n          // Paso 8.2.2.1\n          control++\n\n          // Va por puente\n          puente_time()\n\n        }\n\n      }\n\n      // Paso 9 (Tramo GH -- media = 5 y desv = 0.5)\n      t_gh = generateDistNorm(5, 0.5)\n\n      // Paso 10 \n      time_at_h = time_at_g + t_gh\n\n      // Paso 11\n      ttr = ttr + time_at_h - time_at_a\n\n\n      // console.log(`Este auto tardó: ${time_at_h - time_at_a}`)\n      // console.log(`ttr al ${nc} es: ${ttr}`)\n    \n      \n    }\n\n    return ttr\n\n    //FUNCTIONS BALSA  -  PUENTE\n    function balsa_time() {\n      // Paso 8.1.1 VA POR LA BALSA\n      control++\n  \n      // Diagrama de balsa\n      // Paso 8.1.2 (Tramo BC -- media = 3 y desv = 0.4)\n      t_bc = generateDistNorm(3, 0.4)\n  \n      // Paso 8.1.3\n      time_at_c = time_at_b + t_bc\n  \n      // Consulta si hay que esperar para cruzar\n      // Paso 8.1.4\n      if (time_at_c < tcb) { // Se espera\n        tsc = tcb\n      } else { // No se espera\n        tsc = time_at_c\n      }\n  \n      // Paso 8.1.5 (Tramo CE -- media = 5.5 y desv = 0.6)\n      // Ida de la balza\n      t_ce = generateDistNorm(5.5, 0.6)\n  \n      // Paso 8.1.6 (Tramo EC -- media = 5.5 y desv = 0.6)\n      // Regreso de la balza\n      t_ec = generateDistNorm(4, 0.4)\n  \n      // Paso 8.1.7 \n      time_at_e = tsc + t_ce\n  \n      // Paso 8.1.8\n      tcb = time_at_e + t_ec\n  \n      // Paso 8.1.9 (Tramo EG -- media = 3 y desv = 0.4)\n      t_eg = generateDistNorm(3, 0.4)\n  \n      // Paso 8.1.10\n      time_at_g = time_at_e + t_eg\n    } \n\n    function puente_time() {\n      // Paso 8.2.2.2 (Tramo BD -- media = 5 y desv = 0.6)\n      t_bd = generateDistNorm(5, 0.6)\n\n      // Paso 8.2.2.3\n      time_at_d = time_at_b + t_bd\n\n      // Paso 8.2.2.4 Pregunto si puente ocupado\n      if (time_at_d < tcp) { //Espera\n        tsd = tcp\n      } else { // No espera\n        tsd = time_at_d\n      }\n\n      // Paso 8.2.2.5 (Tramo DF -- media = 3.5 y desv = 0.55)\n      t_df = generateDistNorm(3.5, 0.55)\n\n      // Paso 8.2.2.6\n      time_at_f = tsd + t_df\n\n      // Paso 8.2.2.7\n      tcp = tsd + t_df\n\n      // Paso 8.2.2.8 (Tramo FG -- media = 3 y desv = 0.6)\n      t_fg = generateDistNorm(3, 0.6)\n\n      // Paso 8.2.2.9\n      time_at_g = time_at_f + t_fg\n    }\n\n    \n  }\n\n  function generateDistNorm(media, deviac) {\n    let coseno = Math.cos(2 * Math.PI * Math.random())\n    let raiz = Math.sqrt(-2 * Math.log10(1 - Math.random()))\n    let res = (raiz * coseno) * deviac + media\n\n    return res\n  }\n\n  function generateIS() {\n    // Media de la distribución exponencia (1/λ)\n    const media_distr_exp = 3\n\n    let is = -media_distr_exp * Math.log10(1 - Math.random())\n    return is\n  }\n\n  function getVariosTTR(amount) {\n    let arrayTTRs = []\n    for (let i = 0; i < amount; i++) {\n      arrayTTRs.push(getTTR())\n    }\n    setArrayReplicas(arrayTTRs)\n\n    console.log(arrayTTRs)\n  }\n  \n  function getIntervaloConfianza() {\n    // promedio de replicas\n    let avg = 0\n    let r = arrayReplicas.length\n    for (let i = 0; i < r; i++) {\n      avg += arrayReplicas[i]\n    }\n    avg = avg / r\n\n\n\n    // calculando (x - avr(x))^2\n    let aux = 0\n    for (let i = 0; i < r; i++) {\n      aux += Math.pow(arrayReplicas[i] - avg, 2)\n    }\n\n    // desviación \n    let s = Math.sqrt((1 / (r - 1)) * aux)\n\n    let intervalo = []\n\n    let interInf = avg - (s / Math.sqrt(r * 0.05))\n    let interSup = avg + (s / Math.sqrt(r * 0.05))\n\n    console.log(interInf, interSup);\n\n    intervalo.push(interInf)\n    intervalo.push(interSup)\n\n    setIntervaloDeConfianza(intervalo)\n\n  }\n\n\n  return (\n    <div className=\"App\">\n      <main className=\"App-header\">\n        <div>\n          Simular réplicas\n        </div>\n        <div>\n          <label htmlFor=\"replicas\">Cantidad de replicas: </label>\n          <input type=\"number\" name=\"\" id=\"replicas\" value={replicas} onChange={(e) => setReplicas(Number(e.target.value))} />\n        </div>\n        <div>\n          <label htmlFor=\"numer_m\">m: </label>\n          <input type=\"number\" name=\"\" id=\"numer_m\" value={m} onChange={(e) => setM(Number(e.target.value))} />\n        </div>\n        <div>\n          <label htmlFor=\"numer_n\">n: </label>\n          <input type=\"number\" name=\"\" id=\"numer_n\" value={n} onChange={(e) => setN(Number(e.target.value))}/>\n        </div>\n        <div>\n          <div>Calcular</div>\n          <div><button onClick={() => getVariosTTR(replicas)}>Simular réplicas</button></div> \n        </div>\n\n        <div className=\"container-replicas\">\n          {arrayReplicas.length?\n            <>\n              <div><button onClick={() => getIntervaloConfianza()}>Calcular intervalo de confianza:</button></div> \n\n              {intervaloDeConfianza.length?\n                <div>\n                  <div>El intervalo de confianza es: [{intervaloDeConfianza[0]} , {intervaloDeConfianza[1]}]</div>\n                  <div>Diferencia [{intervaloDeConfianza[1] - intervaloDeConfianza[0]}]</div>\n                </div>\n                :\n                <></>\n              }\n            </>\n            :\n            <></>\n          }\n          {arrayReplicas.length? \n            arrayReplicas.map((el, i) => {\n              return  <div key={el} className=\"replica-row\">\n                        <div>Replica {i + 1}</div>\n                        <div>TTR{i + 1} {el}</div>\n                      </div>\n            })\n            :\n            <></>\n          }\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}